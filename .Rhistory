library(plotly)
library(shiny)
source('studentBackEnd.R')
# inputs
radioButtons("student", "Select a Student", nameList)
# Submissions Table
studentSubs <- reactive(filter(subs, pawsId == input$student) %>% select(label, submissions, bestScore))
head(assignments)
head(subs)
?geom_bar
head(assignments)
?labs
library(RColorBrewer)
?RColorBrewer
brewer.pal(3, "Pastel2")
display.brewer.all()
display.brewer.pal(3, "Pastel2")
?WesAnderson
?wesanderson
?wesanderson::wes_palettes
?wesanderson
?display.brewer.pal
display.brewer.all()
display.brewer.all(colorblindFriendly = True)
display.brewer.all(colorblindFriendly = TRUE)
display.brewer.all()
display.brewer.pal(3, "Set2")
display.brewer.pal(3, "Set3")
display.brewer.pal(3, "Set1")
display.brewer.pal(3, "Set2")
display.brewer.pal(3, "Spectral")
display.brewer.pal(3, "PiYG")
display.brewer.pal(3, "RdYlGn")
display.brewer.pal(10, "RdYlGn")
display.brewer.pal(3, "Set2")
display.brewer.pal(3, "Accent2")
display.brewer.pal(3, "Accent")
?renderPlot
?scale_color_discrete
names(assignments)
names(assignments)[order(assignments)]
a <- table(assignments$subTopic)
names(a)[order(a)]
distinct(assignments, subTopic)
remove(a)
levels <- distinct(assignments, subTopic)
levels
levels <- as.vector(distinct(assignments, subTopic))
levels
assignments$subTopic
levels
levels$subTopic
levels <- as.vector(levels$subTopic)
levels
levels <- distinct(assignments, subTopic)
levels
levels <- as.vector(levels$subTopic)
levels
assignments$st2 <- levels
assignments$st2 <- factor(assignments$subTopic, levels = levels)
head(assignments)
library(flexdashboard)
library(flexdashboard)
library(plotly)
library(shiny)
library(plotly)
library(shiny)
library(RColorBrewer)
library(plotly)
library(shiny)
library(RColorBrewer)
source('studentBackEnd.R')
display.brewer.pal(3, "Pastel1")
display.brewer.pal(3, "Pastel2")
display.brewer.pal(3, "RdYlGn")
display.brewer.pal(5, "RdYlGn")
display.brewer.pal(11, "RdYlGn")
?scale_fill_continuous
head(activity)
activity <- tbl(conDatasource, 'activity')
head(activity)
head(filter(activity, userId != ""))
distinct(activity, hitType)
# Theory
activity %>% select(userId, pagePath, eventCategory, eventLabel, eventValue)
# Theory
activity %>% filter(userId != "") %>% select(userId, pagePath, eventCategory, eventLabel, eventValue)
distinct(activity, eventCategory)
filter(activity, eventCategory == "Page Visibility")
filter(activity, eventCategory == "Page Visibility") %>% select(eventLabel, eventValue)
# Theory
activity %>% filter(userId != "") %>% select(userId, pagePath, eventCategory, eventValue)
head(activity)
# Theory
activity %>% filter(userId != "") %>% select(userId, pagePath, hitType, eventCategory, eventValue)
# Theory
activity %>% filter(userId != "") %>% select(userId, pagePath, hitType, eventCategory, eventValue) %>%
filter(hitType == "pageview" | eventCategory == "Page Visibility")
head(roster)
# Theory
activity %>% filter(userId != "") %>% select(userId, pagePath, hitType, eventCategory, eventValue) %>%
filter(hitType == "pageview" | eventCategory == "Page Visibility") %>% right_join(roster, by = "userId")
# Theory
activity %>% filter(userId != "") %>% select(userId, pagePath, hitType, eventCategory, eventValue) %>%
filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(-lastname:section)
# Theory
activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue)
pages <- tbl(conDatasource, 'page')
head(page)
head(pages)
# Theory
activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath")
# Theory
activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath") %>% filter(pageCategory == "is")
# Theory
activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath") %>% filter(pageCategory == "is" & pagePath != '/is/')
# Theory
theory <- activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath") %>% filter(pageCategory == "is" & pagePath != '/is/') %>% collect()
head(theory)
str(theory)
?substr
x
z
z <- '/is/intro-to-is'
z
len(z)
length(z)
substr(z, 5, 9)
substr(z, 5, 20)
nchar(z)
substr(z, 5, 15)
# Theory
theory <- activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath") %>% filter(pageCategory == "is" & pagePath != '/is/') %>% collect() %>%
mutate(topic = substr(pagePath, 5, nchar(pagePath)))
head(theory)
?gsub
theory %>% mutate(topic = gsub("-", " ", topic))
?lower
?tolower
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
mutate(theory, topic = .simpleCap(topic))
# Caps function
simpleCap <- function(x) {
# Caps function
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
theory <- theory %>% mutate(topic = substr(pagePath, 5, nchar(pagePath))) %>%
mutate(topic = gsub("-", " ", topic)) %>% mutate(topic = simpleCap(topic))
head(theory)
theory <- theory %>% mutate(topic = substr(pagePath, 5, nchar(pagePath))) %>%
mutate(topic = gsub("-", " ", topic)) %>% mutate(topic = simpleCap(topic))
# Caps function
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
theory <- theory %>% mutate(topic = substr(pagePath, 5, nchar(pagePath))) %>%
mutate(topic = gsub("-", " ", topic)) %>% mutate(topic = simpleCap(topic))
head(theory)
View(theory)
distinct(theory, topic)
# Theory
theory <- activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath") %>% filter(pageCategory == "is" & pagePath != '/is/') %>% collect()
theory <- theory %>% mutate(topic = substr(pagePath, 5, nchar(pagePath))) %>%
mutate(topic = gsub("-", " ", topic)) %>% mutate(topic = simpleCap(topic))
theory <- theory %>% mutate(topic = substr(pagePath, 5, nchar(pagePath))) %>%
mutate(topic = gsub("-", " ", topic)) #%>% mutate(topic = simpleCap(topic))
pageviews <- theory %>% filter(hitType == "pageview") %>% count()
pageviews
pageviews <- theory %>% filter(hitType == "pageview") %>% group_by(pawsId, topic)
pageviews
pageviews <- theory %>% filter(hitType == "pageview") %>% group_by(pawsId, topic) %>%
summarize(pgViews = n())
pageviews
timeviews <- theory %>% filter(eventCategory == "Page Visibility") %>% group_by(pawsId, topic) %>%
summarise(seconds = sum(eventValue))
timeViews
timeviews <- theory %>% filter(eventCategory == "Page Visibility") %>% group_by(pawsId, topic) %>%
summarise(seconds = sum(eventValue))
timeviews
theory2 <- left_join(pageviews, timeviews, by = c("pawsId", "topic"))
theory2
head(theory)
View(theory2)
theory2 <- left_join(pageviews, timeviews, by = c("pawsId", "topic")) %>%
mutate(minutes = seconds/60, hours = minutes/60)
?mutate_if
?summarise_all
?sum
?theme
?element_text
?renderplot
?renderPlot
library(tidyverse)
source('connection.R')
#source('constants.R')
# import data
roster <- tbl(conDatasource, 'student_user')
attendance <- tbl(conDatasource, 'attendance')
classes <- tbl(conDatasource, 'attevent')
section <- tbl(conDatasource, 'section')
chunk <- tbl(conDatasource, 'exchunk')
submission <- tbl(conDatasource, 'exsubmission')
activity <- tbl(conDatasource, 'activity')
pages <- tbl(conDatasource, 'page')
# Inputs
## Students by Section
nameTable <- left_join(roster, section, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect()
# Attandance
course <- classes %>% collect() %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
group_by(sectionId, eventTopic) %>% summarise(classTotal = n())
attend <- attendance %>% left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
group_by(pawsId, eventTopic) %>% summarise(att = n())
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
left_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
# Submissions
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
group_by(pawsId, label, mainTopic, subTopic) %>%
summarise(submissions = n(), bestScore = max(totalscore, na.rm = TRUE)) %>% collect() %>%
as.data.frame()
assignments <- chunk %>% collect()
levels <- distinct(assignments, subTopic)
levels <- as.vector(levels$subTopic)
assignments$st2 <- factor(assignments$subTopic, levels = levels)
# Theory
theory <- activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath") %>% filter(pageCategory == "is" & pagePath != '/is/') %>% collect()
theory <- theory %>% mutate(topic = substr(pagePath, 5, nchar(pagePath))) %>%
mutate(topic = gsub("-", " ", topic))
pageviews <- theory %>% filter(hitType == "pageview") %>% group_by(pawsId, topic) %>%
summarize(pgViews = n())
timeviews <- theory %>% filter(eventCategory == "Page Visibility") %>% group_by(pawsId, topic) %>%
summarise(seconds = sum(eventValue, na.rm = TRUE))
theory2 <- left_join(pageviews, timeviews, by = c("pawsId", "topic")) %>%
mutate(minutes = seconds/60, hours = minutes/60)
library(flexdashboard)
library(plotly)
library(shiny)
library(RColorBrewer)
View(nameTable)
?split
View(semSec)
sections <- tbl(conDatasource, 'section')
remove(section)
# Inputs
## Students by Section
nameTable <- left_join(roster, section, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7)))
# Inputs
## Students by Section
nameTable <- left_join(roster, section, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7)))
str(nameTable)
## Student
nameTable <- left_join(roster, section, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7)))
nameTable$section
# Inputs
## Semester & Section
semSec <- section %>% collect() %>% mutate(semester = substr(sectionId, 1, 6)) %>%
mutate(sectionName = paste("Section", substr(sectionId, 7, 7)))
# Inputs
## Semester & Section
semSec <- sections %>% collect() %>% mutate(semester = substr(sectionId, 1, 6)) %>%
mutate(sectionName = paste("Section", substr(sectionId, 7, 7)))
## Student
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7)))
split(nameTable, nameTable$sectionName)
# Inputs
## Students by Section
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7))) %>%
mutate(fullName = paste0(lastname, ", ", firstname))
splitStudents <- split(nameTable, nameTable$sectionName)
# Inputs
## Students by Section
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7))) %>%
mutate(fullname = paste0(lastname, ", ", firstname)) %>% select(pawsId, fullname, sectionName)
splitStudents[1]
splitStudents <- split(nameTable, nameTable$sectionName)
splitStudents[1]
splitStudents[1]
splitStudents[0]
# Inputs
## Students by Section
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7))) %>%
mutate(fullname = paste0(lastname, ", ", firstname)) %>% select(pawsId, fullname, sectionName) %>%
arrange(sectionName, fullname)
# Inputs
## Students by Section
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7))) %>%
mutate(fullname = paste0(lastname, ", ", firstname)) %>% select(pawsId, fullname, sectionName) %>%
arrange(sectionName, fullname)
splitStudents <- split(nameTable, nameTable$sectionName)
splitStudents[1]
?sapply
splitStudents <- split(nameTable, nameTable$section)
# Inputs
## Students by Section
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7))) %>%
mutate(fullname = paste0(lastname, ", ", firstname)) %>%
select(pawsId, fullname, section, sectionName) %>% arrange(sectionName, fullname)
splitStudents <- split(nameTable, nameTable$section)
# Inputs
## Students by Section
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7))) %>%
mutate(fullname = paste0(lastname, ", ", firstname)) %>% select(pawsId, fullname, sectionName) %>%
arrange(sectionName, fullname)
splitStudents <- split(nameTable, nameTable$sectionName)
?setNames
?radioButtons
?selectInput
setNames(splitStudents$`Section 1`$pawsId, splitStudents$`Section 1`$fullname)
sec1 <- setNames(splitStudents$`Section 1`$pawsId, splitStudents$`Section 1`$fullname) %>% as.list()
sec2 <- setNames(splitStudents$`Section 2`$pawsId, splitStudents$`Section 2`$fullname) %>% as.list()
sec3 <- setNames(splitStudents$`Section 3`$pawsId, splitStudents$`Section 3`$fullname) %>% as.list()
sec4 <- setNames(splitStudents$`Section 4`$pawsId, splitStudents$`Section 4`$fullname) %>% as.list()
sec5 <- setNames(splitStudents$`Section 5`$pawsId, splitStudents$`Section 5`$fullname) %>% as.list()
sec6 <- setNames(splitStudents$`Section 6`$pawsId, splitStudents$`Section 6`$fullname) %>% as.list()
sec8 <- setNames(splitStudents$`Section 8`$pawsId, splitStudents$`Section 8`$fullname) %>% as.list()
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = c("NY", "NJ", "CT"),
`West Coast` = c("WA", "OR", "CA"),
`Midwest` = c("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = c("NY", "NJ", "CT"),
`West Coast` = c("WA", "OR", "CA"),
`Midwest` = c("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
c(1, 2, 3) + c(4, 5, 6)
x <- c(1, 2, 3)
str(x)
typeof(x)
x <- c(1, 2, 3) %>% as.list()
str(x)
y <- c(4, 5, 6) %>% as.list()
x+y
remove(x)
remove(y)
library(flexdashboard)
library(plotly)
library(shiny)
library(RColorBrewer)
source('studentBackEnd.R')
library(tidyverse)
source('connection.R')
# import data
roster <- tbl(conDatasource, 'student_user')
attendance <- tbl(conDatasource, 'attendance')
classes <- tbl(conDatasource, 'attevent')
sections <- tbl(conDatasource, 'section')
chunk <- tbl(conDatasource, 'exchunk')
submission <- tbl(conDatasource, 'exsubmission')
activity <- tbl(conDatasource, 'activity')
pages <- tbl(conDatasource, 'page')
# Inputs
## Students by Section
nameTable <- left_join(roster, sections, by = c('section' = 'sectionId')) %>%
distinct(pawsId, lastname, firstname, section) %>%
arrange(lastname) %>% collect() %>%
mutate(sectionName = paste("Section", substr(section, 7, 7))) %>%
mutate(fullname = paste0(lastname, ", ", firstname)) %>% select(pawsId, fullname, sectionName) %>%
arrange(sectionName, fullname)
splitStudents <- split(nameTable, nameTable$sectionName)
sec1 <- setNames(splitStudents$`Section 1`$pawsId, splitStudents$`Section 1`$fullname) %>% as.list()
sec2 <- setNames(splitStudents$`Section 2`$pawsId, splitStudents$`Section 2`$fullname) %>% as.list()
sec3 <- setNames(splitStudents$`Section 3`$pawsId, splitStudents$`Section 3`$fullname) %>% as.list()
sec4 <- setNames(splitStudents$`Section 4`$pawsId, splitStudents$`Section 4`$fullname) %>% as.list()
sec5 <- setNames(splitStudents$`Section 5`$pawsId, splitStudents$`Section 5`$fullname) %>% as.list()
sec6 <- setNames(splitStudents$`Section 6`$pawsId, splitStudents$`Section 6`$fullname) %>% as.list()
sec8 <- setNames(splitStudents$`Section 8`$pawsId, splitStudents$`Section 8`$fullname) %>% as.list()
# Attandance
course <- classes %>% collect() %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
group_by(sectionId, eventTopic) %>% summarise(classTotal = n())
attend <- attendance %>% left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
group_by(pawsId, eventTopic) %>% summarise(att = n())
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
left_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
big <- sections %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
left_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
# Submissions
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
group_by(pawsId, label, mainTopic, subTopic) %>%
summarise(submissions = n(), bestScore = max(totalscore, na.rm = TRUE)) %>% collect() %>%
as.data.frame()
assignments <- chunk %>% collect()
levels <- distinct(assignments, subTopic)
levels <- as.vector(levels$subTopic)
assignments$st2 <- factor(assignments$subTopic, levels = levels)
# Theory
theory <- activity %>% filter(userId != "") %>% filter(hitType == "pageview" | eventCategory == "Page Visibility") %>%
right_join(roster, by = "userId") %>% select(pawsId, pagePath, hitType, eventCategory, eventValue) %>%
left_join(pages, by = "pagePath") %>% filter(pageCategory == "is" & pagePath != '/is/') %>% collect()
theory <- theory %>% mutate(topic = substr(pagePath, 5, nchar(pagePath))) %>%
mutate(topic = gsub("-", " ", topic))
pageviews <- theory %>% filter(hitType == "pageview") %>% group_by(pawsId, topic) %>%
summarize(pgViews = n())
timeviews <- theory %>% filter(eventCategory == "Page Visibility") %>% group_by(pawsId, topic) %>%
summarise(seconds = sum(eventValue, na.rm = TRUE))
theory2 <- left_join(pageviews, timeviews, by = c("pawsId", "topic")) %>%
mutate(minutes = seconds/60, hours = minutes/60)
LETTERS
sec1["NA"] <- "Select a Student"
sec1
remove(sec1)
sec1["NA"] <- "Select a Student"
sec1 <- c()
sec1["NA"] <- "Select a Student"
sec1 <- setNames(splitStudents$`Section 1`$pawsId, splitStudents$`Section 1`$fullname) %>% as.list()
sec1
remove(sec1)
sec1 <- c()
sec1
sec1["NA"] <- "Select a Student"
sec1
sec1 <- setNames(splitStudents$`Section 1`$pawsId, splitStudents$`Section 1`$fullname) %>% as.list()
sec1
sec1 <- c()
sec1["Select a Student"] <- "Select a Student"
sec1
sec1 <- setNames(splitStudents$`Section 1`$pawsId, splitStudents$`Section 1`$fullname) %>% as.list()
sec1
sec1["Select a Student"] <- "NA"
sec1
?return
head(big)
big$missed
big$missed[1]
head(big)
lecTotal <- big %>% filter(eventTopic == "lecture")
pracTotal <- big %>% filter(eventTopic == "practice")
lecTotal$classTotal[1]
head(subs)
?valueBox
