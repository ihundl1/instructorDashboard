nameList[row] <- paste0(nameTable[row, 'lastname'], ', ', nameTable[row, 'firstname'])
}
nameList
?radioButtons
nameTable <- distinct(roster, pawsId, lastname, firstname) %>% collect()
head(nameTable)
nameTable <- distinct(roster, pawsId, lastname, firstname) %>% collect()
nameList <- c()
for (row in 1:nrow(nameTable)) {
index <- nameTable[row, "pawsId"]
nameList[index] <- paste0(nameTable[row, 'lastname'], ', ', nameTable[row, 'firstname'])
}
nameTable[1, "pawsId"]
str(nameTable[1, "pawsId"])
as.character(nameTable[1, "pawsId"])
for (row in 1:nrow(nameTable)) {
index <- as.character(nameTable[row, "pawsId"])
nameList[index] <- paste0(nameTable[row, 'lastname'], ', ', nameTable[row, 'firstname'])
}
nameList
nameList <- c()
for (row in 1:nrow(nameTable)) {
index <- paste0(nameTable[row, 'lastname'], ', ', nameTable[row, 'firstname'])
nameList[index] <- as.character(nameTable[row, "pawsId"])
}
nameList
head(big)
filter(big, pawsId == "aberr19")
nameList
filter(big, pawsId == "abelle8")
library(flexdashboard)
library(flexdashboard)
library(plotly)
library(shiny)
source('studentBackEnd.R')
head(class)
head(attendance)
attendance %>% mutate(new = substr(att_event, 12, 13))
attendance %>% mutate(new = substr(att_event, 13, 14))
attendance %>% mutate(new = substr(att_event, 5, 6))
head(student)
head(roster)
head(nameTable)
head(class)
head(attendance)
head(classes)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% left_join(attendance, by = 'pawsId') %>%
left_join(classes, by = c('eventId' = 'att_event')) %>% collect()
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% left_join(attendance, by = 'pawsId') %>%
left_join(classes, by = c('att_event' = 'eventId')) %>% collect()
head(big)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% left_join(attendance, by = 'pawsId') %>%
left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
mutate(year = substr(att_event, 1, 4)) %>% mutate(semester = substr(att_event, 5, 6)) %>%
mutate(class = substr(13, 14)) %>% select(-att_event)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% left_join(attendance, by = 'pawsId') %>%
left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
mutate(year = substr(att_event, 1, 4)) %>% mutate(semester = substr(att_event, 5, 6)) %>%
mutate(class = substr(att_event, 13, 14)) %>% select(-att_event)
head(big)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% left_join(attendance, by = 'pawsId') %>%
left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
mutate(semester = substr(att_event, 5, 6)) %>% mutate(class = substr(att_event, 13, 14)) %>%
select(-att_event) %>% mutate(eventDate = as.Date(eventDate))
head(big)
head(classes)
course <- classes %>% collect() %>% mutate(semester = substr(eventId, 5, 6)) %>%
mutate(class = substr(eventId, 13, 14)) %>% mutate(section = substr(eventId, 1, 4))
head(course)
course <- classes %>% collect() %>% mutate(semester = substr(eventId, 5, 6)) %>%
mutate(class = substr(eventId, 13, 14)) %>% mutate(section = substr(eventId, 7, 7))
head(course)
course <- classes %>% collect() %>% mutate(semester = substr(eventId, 5, 6)) %>%
mutate(class = substr(eventId, 13, 14)) %>% mutate(section = substr(eventId, 7, 7)) %>%
mutate(year = substr(eventId, 1, 4)) %>% group_by(section, semester, year, eventTopic) %>%
summarise(classes = n())
head(course)
course
head(big)
course <- classes %>% collect() %>% mutate(semester = substr(eventId, 5, 6)) %>%
mutate(class = substr(eventId, 13, 14)) %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
mutate(year = substr(eventId, 1, 4)) %>% group_by(section, semester, year, eventTopic) %>%
summarise(classes = n())
course
course <- classes %>% collect() %>% mutate(semester = substr(eventId, 5, 6)) %>%
mutate(class = substr(eventId, 13, 14)) %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
mutate(year = substr(eventId, 1, 4)) %>% group_by(sectionId, semester, year, eventTopic) %>%
summarise(classes = n())
course
course <- classes %>% collect() %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
group_by(sectionId, eventTopic) %>% summarise(classes = n())
course
big
course
head(attendance)
source('connection.R')
head(attendance)
# import data
roster <- tbl(conDatasource, 'student_user')
activity <- tbl(conDatasource, 'activity')
attendance <- tbl(conDatasource, 'attendance')
classes <- tbl(conDatasource, 'attevent')
section <- tbl(conDatasource, 'section')
head(attendance)
head(classes)
attend <- attendance %>% left_join(roster, by = 'pawsId')
head(attend)
head(classes)
head(attend)
head(attendance)
head(classes)
attend <- attendance %>% left_join(classes, by = c('att_event' = 'eventId'))
head(attend)
attend <- attendance %>% left_join(classes, by = c('att_event' = 'eventId')) %>%
group_by(pawsId, eventTopic) %>% summarise(attendance = n())
head(attend)
head(big)
head(attend)
head(course)
head(big)
head(attend)
head(course)
head(big)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% left_join(attend, by = 'pawsId') %>%
left_join(course, by = 'sectionId') %>% collect() %>% mutate(eventDate = as.Date(eventDate))
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = 'sectionId') %>%
mutate(eventDate = as.Date(eventDate))
course <- classes %>% collect() %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
group_by(sectionId, eventTopic) %>% summarise(classes = n())
attend <- attendance %>% left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
group_by(pawsId, eventTopic) %>% summarise(attendance = n())
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = 'sectionId') %>%
mutate(eventDate = as.Date(eventDate))
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = 'sectionId')
head(big)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic'))
head(big)
attend <- attendance %>% left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
group_by(pawsId, eventTopic) %>% summarise(att = n())
course <- classes %>% collect() %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
group_by(sectionId, eventTopic) %>% summarise(classTotal = n())
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal)
head(big)
?renderValueBox
big %>% filter(aaust25)
big %>% filter(pawsId == 'aaust25')
big %>% filter(pawsId == 'aaust25') -> x
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
head(big)
x
big %>% filter(pawsId == 'aaust25') -> x
x
x$missed[1]
x$missed[2]
View(big)
x %>% filter(eventTopic == 'lecture') %>% select(missed)
as.Character(x %>% filter(eventTopic == 'lecture') %>% select(missed))
as.character(x %>% filter(eventTopic == 'lecture') %>% select(missed))
head(big)
head(attend)
head(course)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% right_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
head(big)
View(big %>% arrange(pawsId))
?as.double
?renderValueBox
?valueBox
?renderValueBox
?valueBoxOutput
?valueBox
View(big)
head(section)
head(classes)
course
?right_join
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') #%>% right_join(course, by = c('sectionId', 'eventTopic')) %>%
head(big)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% right_join(course, by = c('sectionId')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
head(big)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% right_join(course, by = c('sectionId')) %>%
mutate(att = case_when(
eventTopic.x != eventTopic.y ~ 0
TRUE ~ att
)) %>% mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% right_join(course, by = c('sectionId')) %>%
mutate(att = case_when(
eventTopic.x != eventTopic.y ~ 0,
TRUE ~ att
)) %>% mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
typeof(0)
typeof(1)
typeof(as.integer(0))
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% right_join(course, by = c('sectionId')) %>%
mutate(att = case_when(
eventTopic.x != eventTopic.y ~ as.integer(0),
TRUE ~ att
)) %>% mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
?right_join
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
right_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% full_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
left_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% full_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
left_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
big %>% filter(pawsId == 'bbares2') %>% filter(eventTopic == 'lecture') %>% select(missed)
as.character(big %>% filter(pawsId == 'bbares2') %>% filter(eventTopic == 'lecture') %>% select(missed))
?renderValueBox
?valueBox
library(tidyverse)
source('connection.R')
source('constants.R')
# import data
roster <- tbl(conDatasource, 'student_user')
activity <- tbl(conDatasource, 'activity')
attendance <- tbl(conDatasource, 'attendance')
classes <- tbl(conDatasource, 'attevent')
section <- tbl(conDatasource, 'section')
nameTable <- left_join(roster, section, by = c('section' = 'sectionId')) %>%
filter(delivery == "inclass") %>% distinct(pawsId, lastname, firstname) %>% arrange(lastname) %>%
collect()
nameList <- c()
for (row in 1:nrow(nameTable)) {
index <- paste0(nameTable[row, 'lastname'], ', ', nameTable[row, 'firstname'])
nameList[index] <- as.character(nameTable[row, "pawsId"])
}
course <- classes %>% collect() %>% mutate(sectionId = substr(eventId, 1, 7)) %>%
group_by(sectionId, eventTopic) %>% summarise(classTotal = n())
attend <- attendance %>% left_join(classes, by = c('att_event' = 'eventId')) %>% collect() %>%
group_by(pawsId, eventTopic) %>% summarise(att = n())
big <- section %>% filter(delivery == "inclass") %>% select(sectionId, instructor) %>%
left_join(roster, by = c('sectionId' = 'section')) %>% collect() %>%
left_join(attend, by = 'pawsId') %>% left_join(course, by = c('sectionId', 'eventTopic')) %>%
mutate(attPerc = att / classTotal) %>% mutate(missed = classTotal - att)
View(big)
chunk <- tbl(conDatasource, 'exchunk')
submission <- tbl(conDatasource, 'exsubmission')
subs <- left_join(submission, chunk, by = c('label' = 'chunkId'))
head(subs)
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId'))
head(subs)
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
group_by(pawsId, label, mainTopic, subTopic) %>% summarise(submissions = n(), bestScore = max(totalscore))
head(subs)
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
collect() %>% group_by(pawsId, label, mainTopic, subTopic) %>%
summarise(submissions = n(), bestScore = max(totalscore))
view(subs)
View(subs)
assignments <- chunk %>% collect()
head(chunk)
View(subs)
test <- subs %>% filter(pawsId == "aferro5") %>% select(pawsId, label)
test
str(subs)
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
group_by(pawsId, label, mainTopic, subTopic) %>%
summarise(submissions = n(), bestScore = max(totalscore)) %>% as.data.frame()
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
group_by(pawsId, label, mainTopic, subTopic) %>%
summarise(submissions = n(), bestScore = max(totalscore)) %>% collect() %>% as.data.frame()
submission %>% filter(is.na(totalscore))
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
group_by(pawsId, label, mainTopic, subTopic) %>%
summarise(submissions = n(), bestScore = max(totalscore, na.rm = TRUE)) %>% collect() %>%
as.data.frame()
str(subs)
test <- subs %>% filter(pawsId == "aferro5") %>% select(pawsId, label)
test
filter(assignments, !(chunkId %in% test$label))
test <- subs %>% filter(pawsId == "adav236") %>% select(pawsId, label)
filter(assignments, !(chunkId %in% test$label))
test
test <- subs %>% filter(pawsId == "aand144") %>% select(pawsId, label)
filter(assignments, !(chunkId %in% test$label))
filter(assignments, !(chunkId %in% test$label))
head(submissions)
head(submission)
submission %>% arrange(desc(subTime)) %>% head()
View(big)
head(attend)
head(course)
course
cwd()
getwd()
head(roster)
library(tidyverse)
source('connection.R')
source('constants.R')
# import data
roster <- tbl(conDatasource, 'student_user')
attendance <- tbl(conDatasource, 'attendance')
class <- tbl(conDatasource, 'attevent')
chunk <- tbl(conDatasource, 'exchunk')
head(roster)
head(chunk)
submission <- tbl(conDatasource, 'exsubmission')
head(submission)
subs <- submission %>% filter(pawsId != "")
head(subs)
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
select(pawsId, label, mainTopic, subTopic)
head(subs)
head(attendance)
head(class)
att <- left_join(attendance, class, by = c('att_event' = 'eventId')) %>% select(pawsId, eventDate)
head(att)
subs <- submission %>% filter(pawsId != "") %>% left_join(chunk, by = c('label' = 'chunkId')) %>%
select(pawsId, label, mainTopic, subTopic) %>% collect()
att <- left_join(attendance, class, by = c('att_event' = 'eventId')) %>% select(pawsId, eventDate) %>%
collect()
roster()
head(roster)
students <- roster %>% select(pawsId, section) %>% collect()
head(students)
## TOPICS!
isTopics <- c("Home", "Introduction", "Cybersecurity", "Hardware", "Software", "Networking",
"IS Foundations", "Value Creation", "Business Models")
isTopics[1]
isTopics[1:4]
excelTopics <- c("Home", "Formatting", "Functions", "Worksheet Mgt", "Sort & Filter",
"Pivot Tables", "Comprehensive Analysis")
wordTopics <- c("Home", "Simple Document", "Template", "Complex Document")
len(excelTopics)
length(excelTopics)
wordTopics[-1]
exam1Topics <- excelTopics[2:4]
exam2Topics <- excelTopics[5:7]
exam3Topics <- wordTopics[-1]
# exam dates (2 week intervals with the end date being the last day of testing)
# e = excel & w = word
e1 <- interval('2018-09-14', '2018-09-28')
?interval
int_start(e1)
as.Date(int_start(e1))
int <- '2018-08-24' %--% '2018-09-07'
int
int_start(int)
typeof(int_start(int))
int <- as.Date('2018-08-24') %--% as.Date('2018-09-07')
int
typeof(int)
typeof(int_start(int))
head(att)
head(subs)
att <- left_join(attendance, class, by = c('att_event' = 'eventId')) %>% select(pawsId, eventDate) %>%
collect() %>% mutate(eventDate = as.Date(eventDate))
head(att)
# Choose an exam!
# 1 = exam 1, 2 = exam2, 3 = exam3
exam <- 1
if (exam == 1) {
print('1')
} else if (exam == 2) {
print('2')
} else {
print('3')
}
distinct(subs$subTopic)
distinct(subs, subTopic)
head(subs)
exam1chunks <- c('e1a', 'e1b', 'e1c', 'e1d', 'e2a', 'e2b', 'e2c', 'e2d', 'e2e', 'e3a', 'e3b', 'e3c',
'e3d')
exam2chunks <- c('e4a', 'e4b', 'e4c', 'e4d', 'e4e', 'e5a', 'e5b', 'e5c', 'e5d', 'e5e', 'e6a', 'e6b',
'e6c', 'e6d', 'e6e')
exam3chunks <- c('w1a', 'w1b', 'w1c', 'w1d', 'w2a', 'w2b', 'w2c', 'w2d', 'w3a', 'w3b', 'w3c')
typeof(currentSemester)
x <- as.Date(currentSemester)
typeof(x)
?as.Date
?as_date
x <- as_date(currentSemester)
typeof(c)
typeof(x)
int_end(e1)
typeof(int_end(e1))
exam
if (exam == 1) {
startDate <- currentSemester
endDate <- es1
chunks <- exam1chunks
} else if (exam == 2) {
startDate <- int_end(e1)
endDate <- es2
chunks <- exam2chunks
} else {
startDate <- int_end(e2)
endDate <- ws1
chunks <- exam3chunks
}
startDate
endDate
chunks
head(subs)
chunks
goodSubs <- subs %>% filter(label %in% chunks)
head(att)
typeof(as.Date(startDate))
str(att)
goodatt <- att %>% filter(eventDate >= as.Date(startDate), eventDate < as.Date(endDate))
View(goodatt)
goodAtt <- att %>% filter(eventDate >= as.Date(startDate), eventDate < as.Date(endDate))
startDate
str(goodAtt)
endDate
head(goodSubs)
typeof(goodSubs$pawsId)
# find delinquents
badStudents <- students %>% filter(!(pawsId %in% goodSubs$pawsId))
View(badStudents)
View(goodSubs)
distinct(goodSubs, label)
nrow(students)
head(goodAtt)
delinquents <- badStudents %>% filter(!(pawsId %in% goodAtt$pawsId))
View(delinquents)
length(students)
nrow(students)
nrow(badStudents)
nrow(delinquents)
nrow(students %>% filter(pawsId %in% goodSubs$pawsId))
?write.csv
??write.csv
name
# Choose an exam!
# 1 = exam 1, 2 = exam 2, 3 = exam 3
exam <- 1
if (exam == 1) {
startDate <- currentSemester
endDate <- es1
chunks <- exam1chunks
name <- 'exam1delinquents.csv'
} else if (exam == 2) {
startDate <- int_end(e1)
endDate <- es2
chunks <- exam2chunks
name <- 'exam2delinquents.csv'
} else {
startDate <- int_end(e2)
endDate <- ws1
chunks <- exam3chunks
name <- 'exam3delinquents.csv'
}
# write results to a csv file
write.csv(delinquents, file = name)
source('~/DDSLab/InstructorDashboard/delinquents.R', echo=TRUE)
source('~/DDSLab/InstructorDashboard/delinquents.R', echo=TRUE)
source('~/DDSLab/InstructorDashboard/delinquents.R', echo=TRUE)
x <- subs %>% filter(label %in% c('e1a', 'e1b', 'e1c', 'e1d'))
x
distinct(x, label)
y <- students %>% filter(!(pawsId %in% x$pawsId))
y
head(class)
head(roster)
distinct(roster, section)
section <- tbl(conDatasource, 'section')
head(section)
section
inClass <- c('2018FA3', '2018FA4', '2018FA5', '2018FA6')
filter(section, sectionId %in% inClass)
head(roster)
source('~/DDSLab/InstructorDashboard/delinquents.R', echo=TRUE)
nrow(delinquents)
nrow(badStudents)
source('~/DDSLab/InstructorDashboard/delinquents.R', echo=TRUE)
nrow(delinquents)
nrow(students)
nrow(badStudents)
source('~/DDSLab/InstructorDashboard/delinquents.R', echo=TRUE)
nrow(students)
nrow(badStudents)
nrow(delinquents)
