geom_vline(xintercept = as.Date("2018-10-01"))
is %>% filter(topic != isTopics[1]) %>% createPlot() + dateLimits(c4) +
ggtitle("Software Foundations", subtitle = c4) +
geom_vline(xintercept = as.Date("2018-10-15"))
is %>% filter(topic != isTopics[1]) %>% createPlot() + dateLimits(c5) +
ggtitle("IS Foundations & Networking Foundations", subtitle = c5) +
geom_vline(xintercept = as.Date("2018-11-05"))
is %>% filter(topic != isTopics[1]) %>% createPlot() + dateLimits(c6) +
ggtitle("Value Creation & Digital Business Models", subtitle = c6) +
geom_vline(xintercept = as.Date("2018-11-26"))
selectInput('sectionId', label = NULL, c("Choose a Section" = "", sChoice))
sliderInput('studyMinutes', "Minutes on Page", 0, 60, 5, step=10)
input$sectionId
?renderPlot
library(shiny)
?renderPlot
?setNames
dtYear <- read_csv(file = 'https://raw.githubusercontent.com/fivethirtyeight/data/master/terrorism/eu_terrorism_fatalities_by_country.csv') %>%
tidyr::gather('state', 'casualties', - iyear)
dt <- dtYear %>%
group_by(state) %>% summarise(total = sum(casualties))
library(tidyverse)
dtYear <- read_csv(file = 'https://raw.githubusercontent.com/fivethirtyeight/data/master/terrorism/eu_terrorism_fatalities_by_country.csv') %>%
tidyr::gather('state', 'casualties', - iyear)
dt <- dtYear %>%
group_by(state) %>% summarise(total = sum(casualties))
setNames(unique(dt$state), unique(dt$state)) %>% as.list()
library(RGoogleAnalyticsPremium)
clientID <- "676235969098-b8opijrj9oho7atn2sgho1li45e0ahuq.apps.googleusercontent.com"
clientSecret <- "COoYKEFoxLtlhBdyhVkJa2XP"
token <- Auth(clientID, clientSecret)
?renderPlot
?fillRow
?guides
excel %>% createPlot() + ggtitle("Excel Topics")
library(flexdashboard)
library(RColorBrewer)
library(lubridate)
library(tidyverse)
library(plotly)
library(shiny)
excel %>% createPlot() + ggtitle("Excel Topics")
excel %>% createPlot() + ggtitle("Excel Topics") + guides(color="none")
excel %>% createPlot() + ggtitle("Excel Topics") + theme(legend.position = "none")
excel %>% createPlot() + ggtitle("Excel Topics") + theme(axis.title.y = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank())
sChoice
sChoice + c(0, 1)
input$sectionId
?selectInput
?fluidPage
?plotlyOutput
?plotOutput
View(is)
sChoice['Section 1']
names(sChoice)
max(sChoice)
max(studying$section)
len(sChoice)
length(sChoice)
sChoice[7]
sChoice[length(sChoice) - 1]
?selectInput
?reactive
sChoice <- c()
for (s in distinct(studying, section)){
sChoice[paste("Section", str_sub(s, start = -1))] <- s
sChoice["All Sections"] <- ""
}
sChoice
?selectInput
?Init
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-1",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:timeOnScreen",
max.results = 1000
)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-1",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:timeOnScreen"
)
library(RGoogleAnalyticsPremium)
?GetReportData
?GetFile
library(tidyverse)
library(RGoogleAnalyticsPremium)
# client ID
# 646351637970-12593esq0sjra126nr352cignpuk1qhr.apps.googleusercontent.com
# client secret
# RP9GEIvVngpnG-eM_fqsrlXl
clientID <- "clientID"
clientSecret <- "clientSecret"
token <- Auth(clientID, clientSecret)
# packages
library(tidyverse)
library(lubridate)
# data source
source('connection.R')
# constants
currentSemester <- as.Date("2018-08-20")
# import tables from database
activity <- tbl(conDatasource, 'activity')
pageTable <- tbl(conDatasource, 'page')
# join tables
activity <- left_join(activity, pageTable, by = pagePath)
# join tables
activity <- left_join(activity, pageTable, by = 'pagePath')
activity
head(activity)
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study
study <- left_join(study, roster, by = 'userId')
roster <- tbl(conDatasource, 'student_user')
study <- left_join(study, roster, by = 'userId')
study
distinct(study, eventCategory)
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
collect() %>% mutate(visMinutes = if_else(
eventCategory == 'Page Visibility', eventValue / 60, 0))
head(Study)
head(study)
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% collect() %>% mutate(visMinutes = if_else(
eventCategory == 'Page Visibility', eventValue / 60, 0))
head(study)
# split study table
studyTopics <- split(study, study$pageCategory)
View(studyTopics)
studyTopics$null
max(studyTopics$null$visMinutes)
sum(studyTopics$null$visMinutes)
excel <- studyTopics$excel
word <- studyTopics$word
is <- studyTopics$is
?source
studyTopics$is
library(shiny)
word <- word %>% mutate(topic = case_when(
grepl('simple', pagePath) ~ wordTopics[2],
grepl('template', pagePath) ~ wordTopics[3],
grepl('complex', pagePath) ~ wordTopics[4],
TRUE ~ wordTopics[1]
)) %>% mutate(subTopic = case_when(
grepl('concepts', pagePath) ~ "Concepts",
grepl('practice', pagePath) ~ "Practice",
TRUE ~ "Other"
))
source('dashboardBackEnd.R')
View(excel)
?scale_color_brewer
# Concepts v. Practice Plot Function
vsPlot <- function(table, m=5, i="All"){
if (i != "All"){
table <- table %>% filter(section == i)
}
table %>% filter(subtopic != "Other") %>% filter(eventCategory == "Page Visibility", visMinutes >= m) %>%
distinct(userId, subtopic, date) %>% count(subtopic, date) %>%
ggplot(aes(x = date, y = n, color = subtopic)) + geom_line() +
theme_minimal() + labs(x = "Date", y = "Students") +
scale_color_manual(values = brewer.pal(n=3, name="Set2")) + ggtitle("Concepts vs. Practice")
}
wordTopics[1]
typeof(study)
str(study)
as.Date(study$date)
study <- as.Date(study$date)
str(study)
# packages
library(tidyverse)
library(lubridate)
library(RColorBrewer)
# data source
source('connection.R')
# constants
currentSemester <- as.Date("2018-08-20")
# import tables from database
activity <- tbl(conDatasource, 'activity')
pageTable <- tbl(conDatasource, 'page')
roster <- tbl(conDatasource, 'student_user')
# join tables
activity <- left_join(activity, pageTable, by = 'pagePath')
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% collect() %>% mutate(visMinutes = if_else(
eventCategory == 'Page Visibility', eventValue / 60, 0))
# split study table
studyTopics <- split(study, study$pageCategory)
study %>% mutate(date = as.Date(date))
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% collect() %>%
mutate(visMinutes = if_else(eventCategory == 'Page Visibility', eventValue / 60, 0)) %>%
mutate(date = as.Date(date))
str(study)
# checkup starts (first day of checkup testing)
cs1 <- "2018-09-03"
cs2 <- "2018-09-17"
cs3 <- "2018-10-01"
cs4 <- "2018-10-15"
cs5 <- "2018-11-05"
cs6 <- "2018-11-26"
# exam starts (first day of exam testing)
es1 <- "2018-09-24"
es2 <- "2018-10-22"
distinct(study, section)
distinct(study, section) %>% arrange(section)
# create vector for section drop-down list
sChoice <- c()
for (s in distinct(study, section) %>% arrange(section)){
sChoice[paste("Section", str_sub(s, start = -1))] <- s
sChoice["All Sections"] <- "All"
}
sChoice
distinct(roster, section)
study %>% filter(is.na(section))
study %>% filter(is.na(section)) %>% distinct(userId)
study %>% filter(is.na(section)) %>% summarise(sum = sum(visMinutes))
study %>% filter(is.na(section)) %>% group_by(userId) %>% summarise(sum = sum(visMinutes))
study %>% filter(is.na(section)) %>% group_by(userId) %>% summarise(sum = sum(visMinutes)) %>% arrange(sum)
study %>% filter(is.na(section)) %>% group_by(userId) %>% summarise(sum = sum(visMinutes)) %>% arrange(desc(sum))
study %>% filter(is.na(section)) %>% group_by(userId) %>% summarise(sum = sum(visMinutes)) %>% arrange(desc(sum)) %>% mutate(hours = sum/60)
?coord_cartesian
excel %>% studyPlot()
# packages
library(tidyverse)
library(lubridate)
library(RColorBrewer)
# data source
source('connection.R')
# constants
currentSemester <- as.Date("2018-08-20")
# import tables from database
activity <- tbl(conDatasource, 'activity')
pageTable <- tbl(conDatasource, 'page')
roster <- tbl(conDatasource, 'student_user')
# join tables
activity <- left_join(activity, pageTable, by = 'pagePath')
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% collect() %>%
mutate(visMinutes = if_else(eventCategory == 'Page Visibility', eventValue / 60, 0)) %>%
mutate(date = as.Date(date))
# split study table
studyTopics <- split(study, study$pageCategory)
excel <- studyTopics$excel
word <- studyTopics$word
is <- studyTopics$is
## TOPICS!
# Information Systems
isTopics <- c("Home", "Introduction", "Cybersecurity", "Hardware", "Software", "Networking",
"IS Foundations", "Value Creation", "Business Models")
is <- is %>% mutate(topic = case_when(
grepl('intro', pagePath) ~ isTopics[2],
grepl('cyber', pagePath) ~ isTopics[3],
grepl('hard', pagePath) ~ isTopics[4],
grepl('soft', pagePath) ~ isTopics[5],
grepl('net', pagePath) ~ isTopics[6],
grepl('info', pagePath) ~ isTopics[7],
grepl('val', pagePath) ~ isTopics[8],
grepl('ecom', pagePath) ~ isTopics[9],
TRUE ~ isTopics[1]
))
# Excel
excelTopics <- c("Home", "Formatting", "Functions", "Worksheet Mgt", "Sort & Filter",
"Pivot Tables", "Comprehensive Analysis")
excel <- excel %>% mutate(topic = case_when(
grepl('analysis', pagePath) ~ excelTopics[7],
grepl('pivot', pagePath) ~ excelTopics[6],
grepl('sort', pagePath) ~ excelTopics[5],
grepl('management', pagePath)~ excelTopics[4],
grepl('functions', pagePath) ~ excelTopics[3],
grepl('format', pagePath) ~ excelTopics[2],
TRUE ~ excelTopics[1]
)) %>% mutate(subtopic = case_when(
grepl('concepts', pagePath) ~ "Concepts",
grepl('practice', pagePath) ~ "Practice",
TRUE ~ "Other"
))
# Studying Plot Function
studyPlot <- function(table, m=5, i="All"){
if (i != "All"){
table <- table %>% filter(section == i)
}
table %>% filter(eventCategory == 'Page Visibility', visMinutes >= m) %>%
distinct(userId, topic, date) %>% count(topic, date) %>%
ggplot(aes(x = date, y = n, color = topic)) + geom_line() +
theme_minimal() + labs(x = "Date", y = "Students") +
scale_color_manual(values = brewer.pal(n = 8, name = "Set1"))
}
excel %>% studyPlot()
excel %>% filter(is.na(topic))
excel %>% filter(is.na(date))
excel %>% filter(is.na(date)) %>% summarise(sum = sum(visMinutes))
excel %>% filter(is.na(visMinutes))
excel %>% studyPlot()
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
distinct(study, date)
as.Date(study$date)
str(study)
study <- study %>% select(-lastname, -firstname) %>% collect() %>%
mutate(visMinutes = if_else(eventCategory == 'Page Visibility', eventValue / 60, 0))# %>%
str(study)
as.Date(study$date)
?grep
d <- str_detect(study$date, '2018-\\d{2}-\\d{2}')
d
?str_detect
grep
?grep
d <- grep('2018-\\d{2}-\\d{2}', study$date, invert=TRUE)
d
for (v in d){}
remove(v)
study$date[1]
for (v in d){
print(study$date[v])
}
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% collect() %>%
mutate(visMinutes = if_else(eventCategory == 'Page Visibility', eventValue / 60, 0))# %>%
remove(d)
remove(v)
drop(v)
study %>% filter(is.na(date))
d <- grep('2018-\\d{2}-\\d{2}', study$date, invert=TRUE)
d
study$date[7926]
study %>% filter(date == "NA")
excel %>% studyPlot()
remove(d)
# exam dates (2 week intervals)
# e = excel & w = word
e1 <- interval('2018-09-14', '2018-09-28')
e1
excel %>% studyPlot() + coord_cartesian(xlim = (as.Date(int_start(e1))), as.Date(int_end(e1)))
?coord_cartesian
excel %>% studyPlot() + coord_cartesian(xlim = (as.Date(int_start(e1)), as.Date(int_end(e1))))
excel %>% studyPlot() + coord_cartesian(xlim = c(as.Date(int_start(e1)), as.Date(int_end(e1))))
# packages
library(tidyverse)
library(lubridate)
library(RColorBrewer)
# data source
source('connection.R')
# constants
currentSemester <- as.Date("2018-08-20")
# import tables from database
activity <- tbl(conDatasource, 'activity')
pageTable <- tbl(conDatasource, 'page')
roster <- tbl(conDatasource, 'student_user')
# join tables
activity <- left_join(activity, pageTable, by = 'pagePath')
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% collect() %>%
mutate(visMinutes = if_else(eventCategory == 'Page Visibility', eventValue / 60, 0))# %>%
mutate(date = as.Date(date))
# packages
library(tidyverse)
# data source
source('connection.R')
# packages
library(tidyverse)
# data source
source('connection.R')
source('constants.R')
# import data from database
exercises <- tbl(conDatasource, 'exsubmission')
eDetails <- tbl(conDatasource, 'exchunk')
# filter data from previous semesters
exercises %>% filter(subTime > currentSemester)
min(exercises$subTime)
excercises %>% arrange(subTime)
excercises %>% arrange(subTime)
# filter data from previous semesters
exercises <- exercises %>% filter(subTime > currentSemester)
exercises %>% arrange(subTime)
students <- tbl(conDatasource, 'student_user')
sections <- tbl(conDatasource, 'section')
# join tables
ss <- left_join(sections, students, by = c('sectionId'='section'))
# join tables
ss <- left_join(sections, students, by = c('sectionId'='section')) %>% filter(delivery == 'inclass')
full <- right_join(ss, exercises, by = 'pawsId') %>% left_join(eDetails, by = c('label'='chunkId'))
head(ss)
# join tables
ss <- left_join(sections, students, by = c('sectionId'='section')) %>% filter(delivery == 'inclass') %>%
select(sectionId, pawsId)
head(ss)
full <- right_join(ss, exercises, by = 'pawsId') %>% left_join(eDetails, by = c('label'='chunkId'))
head(full)
full <- right_join(ss, exercises, by = 'pawsId') %>% left_join(eDetails, by = c('label'='chunkId')) %>%
select(-filename)
head(full)
?date
full <- right_join(ss, exercises, by = 'pawsId') %>% left_join(eDetails, by = c('label'='chunkId')) %>%
select(-filename) %>% collect() %>% mutate(subTime = as_datetime(subTime))
head(full)
ss <- collect(ss)
ss
head(full)
# how many students have submitted each assignment?
subs <- full %>% count(label, pawsId, date(subTime))
subs
# how many students have submitted each assignment?
subs <- full %>% count(label, date(subTime))
head(subs)
min(ss$sectionId)
count(ss, sectionId)
# how many students are enrolled in ISDS 1102 (in-class)?
enrolled <- count(ss, sectionId)
head(subs)
# how many students have submitted each assignment per day?
subs <- full %>% group_by(label, date(subTime)) %>% summarise(submissions = n())
head(subs)
# how many students are enrolled in ISDS 1102 (in-class)?
enrolled <- group_by(ss, sectionId) %>% summarise(sectionSize = n())
enrolles
enrolled
head(subs)
head(full)
# how many students have submitted each assignment per day?
subs <- full %>% group_by(label, date(subTime), sectionId) %>% summarise(submissions = n()) %>%
left_join(enrolled, by = 'sectionId')
head(subs)
# how many students have submitted each assignment per day?
subs <- full %>% group_by(label, date(subTime), sectionId) %>% summarise(submissions = n())
head(subs)
full %>% arrange(subTime)
distinct(full, sectionId)
filter(full, is.na(sectionId)) %>% count(sectionId)
filter(full, is.na(sectionId)) %>% distinct(pawsId) %>% count(sectionId)
filter(full, is.na(sectionId)) %>% distinct(pawsId
)
filter(full, is.na(sectionId)) %>% distinct(pawsId)
# how many students have submitted each assignment per day?
subs <- full %>% filter(!is.na(sectionId)) group_by(label, date(subTime), sectionId) %>% summarise(submissions = n()) %>%
left_join(enrolled, by = 'sectionId')
# how many students have submitted each assignment per day?
subs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, date(subTime), sectionId) %>%
summarise(submissions = n()) %>% left_join(enrolled, by = 'sectionId')
head(subs)
# what percent of students have submitted the assignment?
subs <- subs %>% mutate(percent = submissions / sectionSize)
head(subs)
subs %>% ggplot(aes(x=label, y=submissions)) + geom_col()
subs %>% ggplot(aes(x=date(subTime), y=submissions)) + geom_col()
subs %>% ggplot(aes(x=`date(subTime)`, y=submissions)) + geom_col()
subs %>% ggplot(aes(x=`date(subTime)`, y=submissions)) + geom_line()
subs %>% ggplot(aes(x=subTime, y=submissions)) + geom_line()
# how many students have submitted each assignment per day?
subs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, subTime, sectionId) %>%
summarise(submissions = n()) %>% left_join(enrolled, by = 'sectionId')
# what percent of students have submitted the assignment?
subs <- subs %>% mutate(percent = submissions / sectionSize)
subs %>% ggplot(aes(x=subTime, y=submissions)) + geom_line()
full <- right_join(ss, exercises, by = 'pawsId') %>% left_join(eDetails, by = c('label'='chunkId')) %>%
select(-filename) %>% collect() %>% mutate(subTime = as_datetime(subTime)) %>% mutate(subDate = date(subTime))
# join tables
ss <- left_join(sections, students, by = c('sectionId'='section')) %>% filter(delivery == 'inclass') %>%
select(sectionId, pawsId)
full <- right_join(ss, exercises, by = 'pawsId') %>% left_join(eDetails, by = c('label'='chunkId')) %>%
select(-filename) %>% collect() %>% mutate(subTime = as_datetime(subTime)) %>%
mutate(subDate = date(subTime))
ss <- collect(ss)
# how many students are enrolled in ISDS 1102 (in-class)?
enrolled <- group_by(ss, sectionId) %>% summarise(sectionSize = n())
# how many students have submitted each assignment per day?
subs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, subTime, sectionId) %>%
summarise(submissions = n()) %>% left_join(enrolled, by = 'sectionId')
# how many students have submitted each assignment per day?
subs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, subDate, sectionId) %>%
summarise(submissions = n()) %>% left_join(enrolled, by = 'sectionId')
# what percent of students have submitted the assignment?
subs <- subs %>% mutate(percent = submissions / sectionSize)
ggplot(subs, aes(x=subDate, y=submissions)) + geom_line()
ggplot(subs, aes(x=subDate, y=submissions)) + geom_bar()
ggplot(subs, aes(x=subDate, y=submissions)) + geom_col()
ggplot(subs, aes(x=subDate, y=submissions)) + geom_line()
ggplot(subs, aes(x=subDate, y=submissions)) + geom_line(aes(color=sectionId))
ggplot(subs, aes(x=subDate, y=submissions)) + geom_line() + facet_wrap(~sectionId)
library(tidyverse)
conDatasource <- src_mysql(host = "ddslab-rds1.cf9v0hpzhpwe.us-east-1.rds.amazonaws.com",
port = 3306,
user = "1102Read",
password = "{M1ni0n#}",
dbname = "ISDS1102_GA"
)
library(flexdashboard)
library(plotly)
library(shiny)
source('studyDashBackEnd.R')
