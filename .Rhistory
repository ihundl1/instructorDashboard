chunks$w1b
chunks[["w1b"]]
chunks[["w1b"]][["pawsId"]]
chunks <- c()
for (c in as.vector(cNames$label)){
chunks[[c]] <- subset(good, label==c, select=pawsId)
chunks[[c]] <- chunks[[c]][["pawsId"]]
}
chunks$w1b
enrolled
sections
students
all <- select(students, pawsId) %<% collect()
all <- select(students, pawsId) %>% collect()
goodChunks[['w1a']]
chunks[['w1a']]
cNames <- distinct(good, label)
goodChunks <- c()
for (g in as.vector(cNames$label)){
goodChunks[[g]] <- subset(good, label==g, select=pawsId)
goodChunks[[g]] <- goodChunks[[g]][["pawsId"]]
}
all <- select(students, pawsId) %>% collect()
badChunks <- c()
for (b in as.vector(cNames$label)){
badChunks[[b]] <- all %>% filter(!(pawsId %in% goodChunks[[b]]))
}
badChunks$e1a
ss
distinct(ss, sectionId)
remove(all)
badChunks[[b]] <- ss %>% filter(!(pawsId %in% goodChunks[[b]])) %>% select(pawsId)
goodChunks <- c()
for (g in as.vector(cNames$label)){
goodChunks[[g]] <- subset(good, label==g, select=pawsId)
goodChunks[[g]] <- goodChunks[[g]][["pawsId"]]
}
badChunks <- c()
for (b in as.vector(cNames$label)){
badChunks[[b]] <- ss %>% filter(!(pawsId %in% goodChunks[[b]])) %>% select(pawsId)
}
badChunks$e1a
badChunks$w1b
# what students have not submitted any files (per chunk)?
good <- full %>% filter(!is.na(sectionId)) %>% count(label, pawsId, sectionId)
cNames <- distinct(good, label)
goodChunks <- c()
for (g in as.vector(cNames$label)){
goodChunks[[g]] <- subset(good, label==g, select=pawsId)
goodChunks[[g]] <- goodChunks[[g]][["pawsId"]]
}
badChunks <- c()
for (b in as.vector(cNames$label)){
badChunks[[b]] <- ss %>% filter(!(pawsId %in% goodChunks[[b]])) %>% select(pawsId)
badChunks[[b]] <- badChunks[[b]][["pawsId"]]
}
badChunks$e1a
enrolled
sum(enrolled$sectionSize)
dailySubs
knitr::opts_chunk$set(echo = FALSE)
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_line()
ggplot(dailySubs, aes(x=subDate, y = submissions, color = sectionId)) + geom_line() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_line() + theme_minimal() +
facet_wrap(~sectionId)
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_line() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_col() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_smooth() + theme_minimal()
col
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_col() + theme_minimal()
dailySubs
full
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, subDate, sectionId, pawsId) %>%
summarise(submissions = n())
dailySubs
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, subDate, sectionId, pawsId) %>%
summarise(submissions = n()) %>% count(label, subDate, sectionId)
dailySubs
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_col() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_col() + theme_minimal()
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(subDate, sectionId, pawsId) %>%
summarise(submissions = n()) %>% count(label, subDate, sectionId)
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(subDate, sectionId, pawsId) %>%
summarise(submissions = n()) %>% count(subDate, sectionId)
dailySubs
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_col() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_line() + theme_minimal()
col
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_col() + theme_minimal()
totalSubs
fullSubs
knitr::opts_chunk$set(echo = FALSE)
library(scales)
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent)
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent)
?theme
?element_text
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) +
theme(axis.text.x = element_text(angle=45, hjust=1))
totalSubs
ggplot(totalSubs, aes(x = label, y = pManySubs)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(fullSubs, aes(x = label, y = pManySubs)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) +
theme(axis.text.x = element_text(angle=45, hjust=1))
?geom_col
for (b in badChunks){
print(b)
}
for (b in badChunks){
print(names(b))
}
for (b in badChunks){
print(length(b))
}
cNames
for (c in as.vector(cNames)){
print(length(badChunks[[c]], "students have not submitted chunk", c))
}
?print
print('x', 'y')
print(length(badChunks[[c]]), "students have not submitted chunk", c)
for (c in as.vector(cNames)){
print(length(badChunks[[c]]), "students have not submitted chunk", c)
}
badChunks[['w1a']]
badChunks$w1b
length(badChunks$e1a)
length(badChunks$w1b)
names(badChunks)
View(chunks)
View(cNames)
knitr::opts_chunk$set(echo = FALSE)
library(scales)
for (name in as.vector(cNames)){
print(name, length(cNames[name]))
}
for (name in as.vector(cNames)){
print(name, length(badChunks[name]))
}
badChunks['e1a']
length(badChunks['e1a'])
length(badChunks[['e1a']])
for (name in as.vector(cNames)){
print(name, length(badChunks[[name]]))
}
badChunks[['e2a']]
badChunks[['e2d']]
length(badChunks[['e2d']])
print(name)
for (name in as.vector(cNames)){
print(name)
}
cNames
as.vector(cNames)
n <- as.vector(cNames)
n
?as.vector
is.vector(n)
n <- as.vector(cNames)
n
names(cNames)
for (name in as.vector(cNames$label)){
print(name)
}
for (name in as.vector(cNames$label)){
print(name, length(badChunks[[name]]))
}
?print
?data.frame
data.frame(row.names=as.vector(cNames$label))
data.frame(chunk, students, row.names=as.vector(cNames$label))
data.frame(chunk = c('a', 'b'), students = c(1, 2), row.names=as.vector(cNames$label))
data.frame(chunk = c('a', 'b'), students = c(1, 2))
data.frame(chunk = c(), students = c())
table = data.frame(chunk = c(), students = c())
table[1]
table[1, 1] <- 'hi'
table
table = data.frame(chunk = c('a'), students = c(12))
table
table[1, 1] <- 'hi'
table[1, 1] <- 'a'
table[1, 1] <- 'b'
table = data.frame(chunk = c('a'), students = c(12), stringsAsFactors = FALSE)
table[1, 1] <- 'b'
table
table[2, 2] <- 45
table
inc <- 1
table = data.frame(chunk = c('a'), students = c(12), stringsAsFactors = FALSE)
inc <- 1
for (name in as.vector(cNames$label)){
table[inc, 1] <- name
table[inc, 2] <- length(badChunks[[name]])
inc <- inc + 1
}
table
library(knitr)
source('backEnd.R')
library(scales)
library(knitr)
table = data.frame(chunk = c('a'), students = c(12), stringsAsFactors = FALSE)
inc <- 1
library(tidyverse)
library(RGoogleAnalyticsPremium)
source("connAPI.R")
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-1",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:timeOnScreen"
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetFile(gaQuery, token)
?GetFile
install.packages("RGoogleAnalytics")
library(tidyverse)
source("connAPI.R")
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-1",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:timeOnScreen"
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetFile(gaQuery, token)
?GetFile
??GetFile
?GetReportData
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
?Init
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-1",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:timeOnScreen",
table.id = "ga:157074007"
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-1",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:timeOnScreen",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:timeOnScreen",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
View(gaData)
distinct(gaData, timeOnScreen)
distinct(gaData, operatingSystem)
distinct(gaData, browser)
distinct(gaData, eventCategory)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue, ga:pageVisibility",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:sessionID,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:sessionId,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:userId,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:userID,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:cliendId,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
queryList <- Init(start.date = "2018-08-21",
end.date = "2018-12-01",
dimensions = "ga:dimension7,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
me <- "5baeab5103afb63cc097b029"
queryList <- Init(start.date = "2018-11-01",
end.date = "2018-11-02",
dimensions = "ga:dimension7,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 1000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
me <- "5baeab5103afb63cc097b029"
library(tidyverse)
source("connAPI.R")
queryList <- Init(start.date = "2018-11-01",
end.date = "2018-11-02",
dimensions = "ga:dimension7,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 10000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
?invisible
library(RGoogleAnalytics)
source("connAPI.R")
invisible(GetProfiles(token))
queryList <- Init(start.date = "2018-11-01",
end.date = "2018-11-02",
dimensions = "ga:dimension7,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 10000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token, paginate_query = TRUE)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(pagePath, eventValue)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(pagePath, eventValue) %>%
mutate(minutes = eventValue / 60)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(pagePath, eventValue) %>%
mutate(minutes = eventValue / 60)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(pagePath, eventValue) %>%
mutate(minutes = eventValue / 60)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(pagePath, eventValue) %>%
mutate(minutes = eventValue / 60)
queryList <- Init(start.date = "2018-11-01",
end.date = "2018-11-02",
dimensions = "ga:dimension4,ga:dimension7,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date,ga:browser,ga:operatingSystem",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 10000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(pagePath, eventValue) %>%
mutate(minutes = eventValue / 60)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(dimension4, pagePath, eventValue) %>%
mutate(minutes = eventValue / 60)
View(gaData)
queryList <- Init(start.date = "2018-11-01",
end.date = "2018-11-02",
dimensions = "ga:dimension4,ga:dimension7,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 10000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(dimension4, pagePath, eventValue) %>%
mutate(minutes = eventValue / 60)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(dimension4, pagePath, eventValue) %>%
mutate(minutes = eventValue / 60) %>% arrange(pagePath)
queryList <- Init(start.date = "2018-11-01",
end.date = "2018-11-02",
dimensions = "ga:dimension4,ga:dimension7,ga:pagePath,ga:eventCategory,ga:eventLabel,ga:date",
metrics = "ga:eventValue",
table.id = "ga:157074007",
max.results = 10000
)
gaQuery <- QueryBuilder(queryList)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(dimension4, pagePath, eventValue) %>%
mutate(minutes = eventValue / 60) %>% arrange(pagePath)
# packages
library(RColorBrewer)
# data source
source('connection.R')
source('constants.R')
# import tables from database
activity <- tbl(conDatasource, 'activity')
pageTable <- tbl(conDatasource, 'page')
roster <- tbl(conDatasource, 'student_user')
# join tables
activity <- left_join(activity, pageTable, by = 'pagePath')
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% collect() %>%
mutate(visMinutes = if_else(eventCategory == 'Page Visibility', eventValue / 60, 0)) %>%
mutate(date = as.Date(date))
head(study)
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
group_by(pawsId, pagePath, eventCategory, date, section) %>% summarise(eventValue = sum(eventValue)) %>%
collect() %>% mutate(visMinutes = eventValue / 60, 0) %>% mutate(date = as.Date(date))
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
collect() %>% mutate(date = as.Date(date)) %>%
group_by(pawsId, pagePath, eventCategory, date, section) %>% summarise(eventValue = sum(eventValue)) %>%
mutate(visMinutes = eventValue / 60, 0)
head(study)
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
collect() %>% mutate(date = as.Date(date)) %>%
group_by(pawsId, pagePath, eventCategory, date, section) %>% summarise(eventValue = sum(eventValue)) %>%
mutate(visMinutes = eventValue / 60, 0)
gaData <- GetReportData(gaQuery, token)
filter(gaData, dimension7 == me & eventCategory == "Page Visibility") %>% select(dimension4, pagePath, eventValue) %>%
mutate(minutes = eventValue / 60) %>% arrange(pagePath)
head(study)
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
collect() %>% mutate(date = as.Date(date)) %>%
group_by(pawsId, pagePath, eventCategory, date, section) %>% summarise(eventValue = sum(eventValue)) %>%
mutate(visMinutes = eventValue / 60)
head(study)
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
collect() %>% mutate(date = as.Date(date)) %>%
group_by(pawsId, pagePath, pageCategory, eventCategory, date, section) %>% summarise(eventValue = sum(eventValue)) %>%
mutate(visMinutes = eventValue / 60)
# create study table
study <- activity %>% select(instances, userId, pagePath, eventCategory, eventValue:pageCategory) %>%
filter(date >= currentSemester)
study <- left_join(study, roster, by = 'userId')
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
collect() %>% mutate(date = as.Date(date)) %>%
group_by(pawsId, pagePath, pageCategory, eventCategory, date, section) %>% summarise(eventValue = sum(eventValue)) %>%
mutate(visMinutes = eventValue / 60)
## FUNCTIONS!
# Density plot function
densePlot <- function(m=5){
study %>% group_by(pawsId, section) %>%
summarise(sessionTime = sum(visMinutes)) %>% filter(sessionTime > m) %>%
ggplot(aes(x = sessionTime)) + geom_density() + facet_wrap(~section)
}
head(study)
head(study)
distinct(study, pawsId)
study %>% distinct(pawsId)
study <- study %>% select(-lastname, -firstname) %>% filter(eventCategory == "Page Visibility") %>%
collect() %>% mutate(date = as.Date(date)) %>%
group_by(pawsId, pagePath, pageCategory, eventCategory, date, section) %>% summarize(eventValue = sum(eventValue)) %>%
mutate(visMinutes = eventValue / 60)
str(study)
as.data.frame(study)
as.data.frame(study) %>% distinct(pawsId)
study <- as.data.frame(study)
str(study)
