summarise(manySubmissions = n(submissions))
manySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, pawsId, sectionId) %>%
summarise(submissions = n()) %>% filter(submissions > 1) %>% group_by(label, sectionId) %>%
summarise(manySubmissions = n())
subs
manySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, pawsId, sectionId) %>%
summarise(submissions = n()) %>% filter(submissions > 1) %>% group_by(label, sectionId) %>%
summarise(manySubStudents = n())
fullSubs <- subs %>% left_join(manySubs, by = c('label', 'sectionId')) %>%
mutate(pSubs = subStudents/sectionSize, pManySubs = manySubStudents/sectionSize)
head(sections)
# data source
source('connection.R')
sections <- tbl(conDatasource, 'section')
head(sections)
ss
fullSubs <- subs %>% left_join(manySubs, by = c('label', 'sectionId')) %>%
left_join(enrolled, by = "sectionId") %>%
mutate(pSubs = subStudents/sectionSize, pManySubs = manySubStudents/sectionSize)
fullSubs
fullSubs <- subs %>% left_join(manySubs, by = c('label', 'sectionId')) %>%
left_join(enrolled, by = "sectionId") %>%
mutate(pSub = subStudents/sectionSize, pManySubs = manySubStudents/sectionSize)
fullSubs
ggplot(fullSubs, aes(x = label, y = pSubs)) + geom_col(fill = 'steelblue') + facet_wrap(~sectionId) + scale_y_continuous(name = '', labels = percent)
library(scales)
ggplot(fullSubs, aes(x = label, y = pSubs)) + geom_col(fill = 'steelblue') + facet_wrap(~sectionId) + scale_y_continuous(name = '', labels = percent)
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col(fill = 'steelblue') + facet_wrap(~sectionId) + scale_y_continuous(name = '', labels = percent)
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col(fill = 'steelblue') + scale_y_continuous(name = '', labels = percent)
fullSubs
totalSubs <- fullSubs %>% group_by(label) %>%
summarise(subStudents = sum(subStudents), manySubStudents = sum(manySubStudents), students = sum(sectionSize))
totalSubs
?sum
totalSubs <- fullSubs %>% group_by(label) %>%
summarise(subStudents = sum(subStudents, na.rm = TRUE), manySubStudents = sum(manySubStudents, na.rm = TRUE), students = sum(sectionSize, na.rm = TRUE))
totalSubs
totalSubs <- fullSubs %>% group_by(label) %>%
summarise(subStudents = sum(subStudents, na.rm = TRUE), manySubStudents = sum(manySubStudents, na.rm = TRUE), students = sum(sectionSize, na.rm = TRUE)) %>%
mutate(pSub = subStudents/students, pManySubs = manySubStudents/students)
totalSubs
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col(fill = 'steelblue') + scale_y_continuous()
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col(fill = 'steelblue') + scale_y_continuous(name = '', labels = percent)
# what percent of students of have submitted assignments? Multiple times?
subs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, pawsId, sectionId) %>%
summarise(submissions = n()) %>% group_by(label, sectionId) %>% summarise(subStudents = n())
subs
# what students have not submitted any files?
good <- full %>% filter(!is.na(sectionId)) %>% group_by(label, pawsId, sectionId)
good
# what students have not submitted any files?
good <- full %>% filter(!is.na(sectionId)) %>% count(label, pawsId, sectionId)
good
?split
goodChunks <- split(good, good$label)
View(goodChunks)
x  +y
'x' + 'y'
'x' & 'y'
paste('x', 'y')
paste0('x', 'y')
for (values in goodChunks) {print(values)}
values
for (values in goodChunks) {print(names(values))}
str(good$label)
good$label
distinct(good, label)
for (values in goodChunks) {}
for (values in distinct(good, label)) {print(values)}
remove(values)
paste0('x', 'y') <- 'xy'
paste0('x', 'y') <- 200
'why' <- 51
remove(why)
n <- distinct(good, label)
n
?split.data.frame
remove(n)
goodChunks$e1a$pawsId
enrolled
ss
chunky <- function(name, chunk){
name <- ss %>% filter(!(pawsId %in% goodChunks$chunk$pawsId))
}
chunky('no1', 'e1a')
c <- 'e1a'
goodChunks$c$pawsId
?subset
str(goodChunks)
subset(airquality, Temp > 80, select = c(Ozone, Temp))
airquality
goodChunks[1]
len(goodChunks)
length(goodChunks)
names(goodChunks)
goodChunks[e1a]
goodChunks['e1a']
goodChunks['e1a']$pawsId
chunky <- function(list){
for (name in names(list)){
print(name)
}
}
chunky(goodChunks)
chunky <- function(list){
for (name in names(list)){
name <- list[name]
}
}
chunky(goodChunks)
chunky <- function(list){
for (name in names(list)){
list[name]
}
}
chunky(goodChunks)
goodChunks[e1a]
goodChunks['e1a']
badChunks <- c()
chunky <- function(list, newList){
for (name in names(list)){
newList[name] <- list[name] %>% select(pawsId)
}
}
chunky(goodChunks, badChunks)
names(goodChunks)
goodChunks['e1a']
goodChunks['e1a'] %>% select(pawsId)
goodChunks %>% distinct(pawsId)
goodChunks
goodChunks['e1a']
goodChunks['e2a'] %>% count(pawsId)
e2a <- goodChunks['e2a']
e2a
e2a %>% distinct(pawsId)
e2a %>% select(pawsId)
e2a$pawsId
remove(e2a)
e2a <- goodChunks$e2a
e2a
str(e2a)
e2a <- goodChunks['e2a']
str(e2a)
e2a[1]
e2a[1] %>% select(pawsId)
remove(e2a)
goodChunks$2
chunky <- function(list, newList){
for (name in names(list)){
print(goodChunks$name)
}
}
chunky <- function(list, newList){
for (name in names(list)){
print(list$name)
}
}
chunky <- function(list){
for (name in names(list)){
print(list$name)
}
}
chunky(goodChunks)
chunky <- function(list){
for (name in names(list)){
print(list)
}
}
chunky(goodChunks)
chunky <- function(list){
for (tbl in list){
print(tbl)
}
}
chunky(goodChunks)
chunky <- function(list){
for (tbl in list){
print(names(tbl))
}
}
chunky(goodChunks)
chunky <- function(list){
c = 1
for (tbl in list){
badChunks[c] <- tbl %>% select(pawsId)
}
}
badChunks
badChunks <- c()
badChunks
chunky(goodChunks)
chunky <- function(list){
c <-  1
for (tbl in list){
badChunks[c] <- tbl %>% select(pawsId)
c <- c + 1
}
}
chunky(goodChunks)
for (x in goodChunks){print names(x)}
for (x in goodChunks){print(names(x))}
names(goodChunks)
remove(goodChunks)
remove(badChunks)
?subset
good
?return
?subset
chunky <- function(df){
n <- distinct(df, label)
r <- c()
for (chunk in n){
r[n] <- subset(df, label = n, select = pawsId)
}
return(r)
}
chunky(good)
chunky <- function(df){
n <- distinct(df, label)
r <- c()
for (chunk in n){
r[chunk] <- subset(df, label = chunk, select = pawsId)
}
return(r)
}
chunky(good)
chunks <- chunky(good)
chunks$e1a
chunky <- function(df){
n <- distinct(df, label)
#  r <- c()
#  for (chunk in n){
#    r[chunk] <- subset(df, label = chunk, select = pawsId)
#  }
return(n)
}
chunky(good)
chunky <- function(df){
n <- distinct(df, label)
r <- c()
for (chunk in n){
#    r[chunk] <- subset(df, label == chunk, select = pawsId)
r[chunk] <- chunk
}
return(r)
}
chunky(good)
chunky <- function(df){
n <- distinct(df, label)
r <- c()
for (chunk in n){
r[chunk] <- subset(df, label == chunk, select = pawsId)
}
return(r)
}
chunks <- chunky(good)
good
chunky <- function(df){
n <- distinct(df, label)
r <- c()
for (chunk in n){
r[chunk] <- subset(df, label == chunk, select = pawsId)
}
return(r)
}
chunky(good)
distinct(good, label)
for (l in distinct(df, label)){print(l)}
for (l in distinct(good, label)){print(l)}
chunks$e1a
chunks$w1b
chunky <- function(df){
n <- distinct(df, label)
r <- c()
for (chunk in n){
r[chunk] <- subset(df, label == chunk)
}
return(r)
}
chunky(good)
chunky <- function(df){
n <- distinct(df, label)
r <- c()
for (chunk in n){
r[chunk] <- subset(df, label == chunk, drop=TRUE)
}
return(r)
}
chunky(good)
remove(c)
remove(l)
View(x)
remove(x)
View(chunks)
remove(chunks)
remove(chunky)
chunks <- distinct(good, label)
chunks
for (c in chunks){print(c)}
# what students have not submitted any files?
good <- full %>% filter(!is.na(sectionId)) %>% count(label, pawsId, sectionId)
cNames <- distinct(good, label)
chunks <- c()
for (c in cNames){
chunks[[c]] <- subset(good, label==c, select=pawsId)
}
# what students have not submitted any files?
good <- full %>% filter(!is.na(sectionId)) %>% count(label, pawsId, sectionId)
cNames <- distinct(good, label)
chunks <- c()
i <- 1
for (c in cNames){
chunks[[i]] <- subset(good, label==c, select=pawsId)
i <- i+1
}
good$label
cNames
for (c in cNames){str(c)}
str(cNames)
as.vector(cNames)
str(as.vector(cNames))
as.vector(distinct(good, label))
as.vector(cNames$label)
str(as.vector(cNames$label))
chunks <- c()
i <- 1
for (c in as.vector(cNames$label)){
chunks[[i]] <- subset(good, label==c, select=pawsId)
i <- i+1
}
chunks
chunks[1]
chunks <- c()
i <- 1
for (c in as.vector(cNames$label)){
chunks[[c]] <- subset(good, label==c, select=pawsId)
i <- i+1
}
chunks$e1a
str(chunks$e1a)
"aand144" %in% chunks$e1a
"aand144" %in% chunks$e1a$pawsId
str(subset(good, label=="e1a", select=pawsId)
str(subset(good, label=="e1a", select=pawsId))
str(as.vector(subset(good, label=="e1a", select=pawsId)))
as.vector(chunks$e1a$pawsId)
View(chunks)
View(cNames)
subset(good, label=="w1a")
subset(good, label=="w1a", select=pawsId)
# what students have not submitted any files?
good <- full %>% filter(!is.na(sectionId)) %>% count(label, pawsId, sectionId)
cNames <- distinct(good, label)
chunks <- c()
i <- 1
for (c in as.vector(cNames$label)){
chunks[[c]] <- subset(good, label==c, select=pawsId)
i <- i+1
}
chunks$w1b
View(chunks)
chunks[["w1b"]]
chunks <- c()
for (c in as.vector(cNames$label)){
chunks[[c]] <- subset(good, label==c, select=pawsId)
chunks[[c]] <- as.vector(chunks[[c]])
}
chunks$e1a
chunks$w1b
chunks[["w1b"]]
chunks[["w1b"]][["pawsId"]]
chunks <- c()
for (c in as.vector(cNames$label)){
chunks[[c]] <- subset(good, label==c, select=pawsId)
chunks[[c]] <- chunks[[c]][["pawsId"]]
}
chunks$w1b
enrolled
sections
students
all <- select(students, pawsId) %<% collect()
all <- select(students, pawsId) %>% collect()
goodChunks[['w1a']]
chunks[['w1a']]
cNames <- distinct(good, label)
goodChunks <- c()
for (g in as.vector(cNames$label)){
goodChunks[[g]] <- subset(good, label==g, select=pawsId)
goodChunks[[g]] <- goodChunks[[g]][["pawsId"]]
}
all <- select(students, pawsId) %>% collect()
badChunks <- c()
for (b in as.vector(cNames$label)){
badChunks[[b]] <- all %>% filter(!(pawsId %in% goodChunks[[b]]))
}
badChunks$e1a
ss
distinct(ss, sectionId)
remove(all)
badChunks[[b]] <- ss %>% filter(!(pawsId %in% goodChunks[[b]])) %>% select(pawsId)
goodChunks <- c()
for (g in as.vector(cNames$label)){
goodChunks[[g]] <- subset(good, label==g, select=pawsId)
goodChunks[[g]] <- goodChunks[[g]][["pawsId"]]
}
badChunks <- c()
for (b in as.vector(cNames$label)){
badChunks[[b]] <- ss %>% filter(!(pawsId %in% goodChunks[[b]])) %>% select(pawsId)
}
badChunks$e1a
badChunks$w1b
# what students have not submitted any files (per chunk)?
good <- full %>% filter(!is.na(sectionId)) %>% count(label, pawsId, sectionId)
cNames <- distinct(good, label)
goodChunks <- c()
for (g in as.vector(cNames$label)){
goodChunks[[g]] <- subset(good, label==g, select=pawsId)
goodChunks[[g]] <- goodChunks[[g]][["pawsId"]]
}
badChunks <- c()
for (b in as.vector(cNames$label)){
badChunks[[b]] <- ss %>% filter(!(pawsId %in% goodChunks[[b]])) %>% select(pawsId)
badChunks[[b]] <- badChunks[[b]][["pawsId"]]
}
badChunks$e1a
enrolled
sum(enrolled$sectionSize)
dailySubs
knitr::opts_chunk$set(echo = FALSE)
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_line()
ggplot(dailySubs, aes(x=subDate, y = submissions, color = sectionId)) + geom_line() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_line() + theme_minimal() +
facet_wrap(~sectionId)
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_line() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_col() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_smooth() + theme_minimal()
col
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_col() + theme_minimal()
dailySubs
full
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, subDate, sectionId, pawsId) %>%
summarise(submissions = n())
dailySubs
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(label, subDate, sectionId, pawsId) %>%
summarise(submissions = n()) %>% count(label, subDate, sectionId)
dailySubs
ggplot(dailySubs, aes(x=subDate, y = submissions)) + geom_col() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_col() + theme_minimal()
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(subDate, sectionId, pawsId) %>%
summarise(submissions = n()) %>% count(label, subDate, sectionId)
# how many students have submitted each assignment per day?
dailySubs <- full %>% filter(!is.na(sectionId)) %>% group_by(subDate, sectionId, pawsId) %>%
summarise(submissions = n()) %>% count(subDate, sectionId)
dailySubs
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_col() + theme_minimal()
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_line() + theme_minimal()
col
ggplot(dailySubs, aes(x=subDate, y = n)) + geom_col() + theme_minimal()
totalSubs
fullSubs
knitr::opts_chunk$set(echo = FALSE)
library(scales)
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent)
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent)
?theme
?element_text
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45))
ggplot(totalSubs, aes(x = label, y = pSub)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(fullSubs, aes(x = label, y = pSub)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) +
theme(axis.text.x = element_text(angle=45, hjust=1))
totalSubs
ggplot(totalSubs, aes(x = label, y = pManySubs)) + geom_col() + theme_minimal() +
scale_y_continuous(name = "", labels = percent) + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(fullSubs, aes(x = label, y = pManySubs)) + geom_col() + facet_wrap(~sectionId) + theme_minimal() +
scale_y_continuous(name = "", labels = percent) +
theme(axis.text.x = element_text(angle=45, hjust=1))
?geom_col
for (b in badChunks){
print(b)
}
for (b in badChunks){
print(names(b))
}
for (b in badChunks){
print(length(b))
}
cNames
for (c in as.vector(cNames)){
print(length(badChunks[[c]], "students have not submitted chunk", c))
}
?print
print('x', 'y')
print(length(badChunks[[c]]), "students have not submitted chunk", c)
for (c in as.vector(cNames)){
print(length(badChunks[[c]]), "students have not submitted chunk", c)
}
badChunks[['w1a']]
badChunks$w1b
